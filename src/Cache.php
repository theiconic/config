<?php

namespace TheIconic\Config;

/**
 * Config cache handler
 *
 * detects modifications on passed config source paths
 * and generates/updates a per-environment cache config php file
 *
 * @package Shared\Helper\Config
 */
class Cache
{

    /**
     * @var string
     */
    protected $basePath;

    /**
     * constructor takes the base path for cache files
     *
     * @param string $basePath the base path
     */
    public function __construct($basePath)
    {
        $this->setBasePath($basePath);
    }

    /**
     * get the config array
     *
     * @param string $key the config key
     * @return array the config array
     */
    public function read($key)
    {
        return include($this->getCacheFile($key));
    }

    /**
     * get the path to the cache config file for the current environment
     *
     * @return string the file path
     */
    protected function getCacheFile($key)
    {
        return sprintf('%s/%s.php', $this->basePath, $key);
    }

    /**
     * checks if the cached config is still
     * up to date or needs to be regenerated
     *
     * @return bool
     */
    public function isValid($key, $timestamp)
    {
        $file = $this->getCacheFile($key);

        if (!is_readable($file)) {
            return false;
        }

        return (filemtime($file) >= $timestamp);
    }

    /**
     * writes the cache config php file
     *
     * @param string $key the cache key
     * @param array $config the config array
     * @return $this
     */
    public function write($key, array $config, array $sourcePaths = [])
    {
        $content = <<<EOF
<?php
/*
 * this file- is autogenerated by %CLASSNAME%
 * and will be automatically overwritten
 * please edit the source files instead
%SOURCES%*/
EOF;
        $content = str_replace('%CLASSNAME%', get_class($this), $content);
        $content = str_replace('%SOURCES%', $this->formatSourcePaths($sourcePaths), $content);
        $content .= PHP_EOL;
        $content .= 'return ' . var_export($config, true) . ';';

        $cacheFile = $this->getCacheFile($key);

        if (!is_dir(dirname($cacheFile))) {
            mkdir(dirname($cacheFile), 0777, true);
        }

        file_put_contents($cacheFile, $content);

        return $this;
    }

    /**
     * format source paths - only used for the cache config file teaser above
     *
     * @return string
     */
    protected function formatSourcePaths($sourcePaths)
    {
        $formatted = '';

        foreach ($sourcePaths as $path) {
            $formatted .= sprintf(' * %s', $path) . PHP_EOL;
        }

        return $formatted;
    }

    /**
     * set the base path
     *
     * @param $path
     * @return $this
     */
    public function setBasePath($path)
    {
        $this->basePath = $path;

        return $this;
    }

    /**
     * get the base path
     * 
     * @return string
     */
    public function getBasePath()
    {
        return $this->basePath;
    }

}
